#!/bin/bash

# Script de deploy para producci√≥n
set -e

echo "üöÄ Iniciando deploy de producci√≥n..."
echo "=================================="

# Verificar que estamos en el directorio correcto
if [ ! -f "manage.py" ]; then
    echo "‚ùå Error: No se encontr√≥ manage.py. Aseg√∫rate de estar en el directorio ra√≠z del proyecto."
    exit 1
fi

# Verificar que Docker est√° disponible
if ! command -v docker &> /dev/null; then
    echo "‚ùå Error: Docker no est√° instalado"
    exit 1
fi

if ! docker info &> /dev/null; then
    echo "‚ùå Error: Docker no est√° ejecut√°ndose o no tienes permisos"
    exit 1
fi

echo "‚úÖ Docker est√° funcionando correctamente"

# Verificar que existe el archivo .env.prod
if [ ! -f ".env.prod" ]; then
    echo "‚ö†Ô∏è  No se encontr√≥ el archivo .env.prod"
    echo "üîß Generando archivo .env.prod con valores seguros..."
    
    # Verificar que el script de configuraci√≥n existe
    if [ ! -f "scripts_utils/setup_prod_env.py" ]; then
        echo "‚ùå Error: No se encontr√≥ scripts_utils/setup_prod_env.py"
        exit 1
    fi
    
    # Ejecutar el script de configuraci√≥n
    python3 scripts_utils/setup_prod_env.py
    
    if [ $? -ne 0 ]; then
        echo "‚ùå Error al generar .env.prod"
        exit 1
    fi
    
    # Verificar que se cre√≥ correctamente
    if [ ! -f ".env.prod" ]; then
        echo "‚ùå Error: No se pudo crear el archivo .env.prod"
        exit 1
    fi
    
    echo "‚úÖ Archivo .env.prod generado exitosamente"
fi

# Cargar variables de entorno de forma segura
echo "üìã Cargando variables de entorno..."

# Funci√≥n para leer variable del archivo .env.prod
get_env_var() {
    local var_name=$1
    local var_line=$(grep "^${var_name}=" .env.prod | head -1)
    if [ -n "$var_line" ]; then
        echo "${var_line#*=}" | tr -d '\r' | tr -d '"' | tr -d "'"
    fi
}

# Leer variables cr√≠ticas
DATABASE_URL=$(get_env_var "DATABASE_URL")
SECRET_KEY=$(get_env_var "SECRET_KEY")
DB_PASSWORD=$(get_env_var "DB_PASSWORD")
DEBUG=$(get_env_var "DEBUG")
ALLOWED_HOSTS=$(get_env_var "ALLOWED_HOSTS")
CORS_ALLOWED_ORIGINS=$(get_env_var "CORS_ALLOWED_ORIGINS")

# Verificar que las variables necesarias est√°n definidas
required_vars=("DATABASE_URL" "SECRET_KEY" "DB_PASSWORD" "DEBUG" "ALLOWED_HOSTS")
for var in "${required_vars[@]}"; do
    var_value="${!var}"
    if [ -z "$var_value" ]; then
        echo "‚ùå Error: Variable $var no est√° definida en .env.prod"
        exit 1
    fi
done

echo "‚úÖ Variables de entorno cargadas correctamente"

# Detener contenedores existentes si est√°n corriendo
echo "üõë Deteniendo contenedores existentes..."
docker-compose -f docker-compose.prod.yml down --remove-orphans || true

# Construir y levantar contenedores
echo "üî® Levantando contenedores de producci√≥n..."
docker-compose -f docker-compose.prod.yml up -d

# Esperar a que la base de datos est√© lista
echo "‚è≥ Esperando a que la base de datos est√© lista..."
sleep 10

# Ejecutar migraciones
echo "üìä Ejecutando migraciones..."
docker-compose -f docker-compose.prod.yml exec -T web python manage.py migrate

# Cargar datos iniciales si es necesario
echo "üì¶ Cargando datos iniciales..."
docker-compose -f docker-compose.prod.yml exec -T web python manage.py loaddata fixtures/*.json || true

# Recolectar archivos est√°ticos
echo "üìÅ Recolectando archivos est√°ticos..."
docker-compose -f docker-compose.prod.yml exec -T web python manage.py collectstatic --noinput

echo ""
echo "üéâ ¬°Deploy completado exitosamente!"
echo ""
echo "üìã Informaci√≥n del deploy:"
echo "   - URL: http://localhost:8800"
echo "   - Base de datos: PostgreSQL en puerto 5432"
echo "   - Contenedores: docker-compose -f docker-compose.prod.yml ps"
echo ""
echo "üîß Comandos √∫tiles:"
echo "   - Ver logs: docker-compose -f docker-compose.prod.yml logs -f"
echo "   - Detener: docker-compose -f docker-compose.prod.yml down"
echo "   - Reiniciar: docker-compose -f docker-compose.prod.yml restart"
echo ""
echo "‚ö†Ô∏è  IMPORTANTE:"
echo "   - Actualiza ALLOWED_HOSTS y CORS_ALLOWED_ORIGINS en .env.prod con tu dominio real"
echo "   - Configura un proxy reverso (nginx) para producci√≥n"
echo "   - Configura SSL/TLS para HTTPS"
