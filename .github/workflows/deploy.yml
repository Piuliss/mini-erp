name: Deploy to Production

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: production
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check workflow status
        run: |
          echo "✅ CI/CD Pipeline completed successfully"
          echo "🚀 Starting deployment to production..."
          echo "📝 Commit: ${{ github.sha }}"
          echo "👤 Triggered by: ${{ github.actor }}"
      
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: deploy
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          timeout: 300s
          command_timeout: 60s
          script: |
            set -e
            
            echo "🚀 Iniciando deploy en $(date)"
            cd /home/deploy/mini-erp
            
            # Actualizar código
            echo "📥 Actualizando código..."
            git fetch origin
            git reset --hard origin/main
            git clean -fd
            
            # Hacer los scripts ejecutables
            echo "🔧 Configurando scripts..."
            chmod +x scripts_utils/deploy_prod.sh
            chmod +x scripts_utils/verify_prod_setup.sh
            
            # Verificar configuración antes del deploy
            echo "🔍 Verificando configuración del entorno..."
            ./scripts_utils/verify_prod_setup.sh
            
            # Ejecutar deploy automatizado
            echo "🚀 Ejecutando deploy automatizado..."
            ./scripts_utils/deploy_prod.sh
            
            # Verificar estado final
            echo "📊 Estado final de los contenedores:"
            docker compose -f docker-compose.prod.yml ps
            
            # Limpiar imágenes viejas
            echo "🧹 Limpiando imágenes antiguas..."
            docker image prune -f --filter "until=24h" || true

            echo "✅ Deploy completado exitosamente!"
            echo "🌐 Aplicación disponible en: http://${{ secrets.SERVER_IP }}:8800"