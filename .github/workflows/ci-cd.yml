name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: honeyjack/mini-erp

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests with Docker Compose
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker Compose services
      run: |
        docker compose build

    - name: Start services and wait for readiness
      run: |
        docker compose up -d
        # Wait for PostgreSQL to be ready
        timeout 60 bash -c 'until docker compose exec -T db pg_isready -U postgres; do sleep 2; done'
        # Wait for Django to be ready
        timeout 60 bash -c 'until docker compose exec -T web python manage.py check; do sleep 2; done'

    - name: Run database migrations
      run: |
        docker compose exec -T web python manage.py migrate

    - name: Run unit tests
      run: |
        docker compose exec -T web python manage.py test users inventory sales purchases reports --keepdb --verbosity=2

    - name: Run E2E tests
      run: |
        docker compose exec -T web python manage.py test tests_e2e --keepdb --verbosity=2

    - name: Run business flow E2E test
      run: |
        docker compose exec -T web python manage.py test tests_e2e.test_business_flow.BusinessFlowE2ETest.test_complete_business_flow --keepdb --verbosity=2

    - name: Cleanup services
      if: always()
      run: |
        docker compose down

  bump-version:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    name: Bump Version
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Bump version
      id: bump_version
      run: |
        # Get current version
        CURRENT_VERSION=$(cat VERSION)
        echo "Current version: $CURRENT_VERSION"
        
        # Parse version components
        IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
        
        # Increment patch version
        NEW_PATCH=$((patch + 1))
        NEW_VERSION="$major.$minor.$NEW_PATCH"
        
        # Update VERSION file
        echo "$NEW_VERSION" > VERSION
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "Bumped version from $CURRENT_VERSION to $NEW_VERSION"

    - name: Commit and push version bump
      run: |
        git add VERSION
        git commit -m "Bump version to ${{ steps.bump_version.outputs.version }}"
        git push origin main

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test, bump-version]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
    name: Build, Push and Deploy to Production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Get version
      id: version
      run: |
        VERSION=$(cat VERSION)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ steps.version.outputs.version }}
          type=raw,value=latest
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Notify build success
      run: |
        echo "‚úÖ Build and push completed successfully!"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "Tags: ${{ steps.meta.outputs.tags }}"

    - name: Deploy to production server
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.1
      with:
        host: ${{ secrets.SERVER_IP }}
        username: deploy
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        port: 22
        timeout: 300s
        command_timeout: 60s
        script: |
          set -e
          
          echo "üöÄ Iniciando deploy en $(date)"
          cd /opt/mini-erp
          
          # Actualizar c√≥digo
          echo "üì• Actualizando c√≥digo..."
          git fetch origin
          git reset --hard origin/main
          git clean -fd
          git pull origin main
          
          # Hacer los scripts ejecutables
          echo "üîß Configurando scripts..."
          chmod +x scripts_utils/deploy_prod.sh
          
          # Ejecutar deploy automatizado (incluye verificaci√≥n y generaci√≥n de .env.prod)
          echo "üöÄ Ejecutando deploy automatizado..."
          ./scripts_utils/deploy_prod.sh
          
          # Verificar estado final
          echo "üìä Estado final de los contenedores:"
          docker compose -f docker-compose.prod.yml ps
          
          # Limpiar im√°genes viejas
          echo "üßπ Limpiando im√°genes antiguas..."
          docker image prune -f --filter "until=24h" || true

          echo "‚úÖ Deploy completado exitosamente!"
          echo "üåê Aplicaci√≥n disponible en: http://${{ secrets.SERVER_IP }}:8800"
